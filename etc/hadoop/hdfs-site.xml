<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
<!--
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License. See accompanying LICENSE file.
-->

<!-- Put site-specific property overrides in this file. -->

<configuration>

  <property>
    <name>dfs.namenode.name.dir</name>
    <value>/var/hdfs/name-1,/var/hdfs/name-2</value>
    <description>Determines where on the local filesystem the DFS name node should store the name table(fsimage). If this is a comma-delimited list of directories then the name table is replicated in all of the directories, for redundancy.</description>
  </property>

  <property>
    <name>dfs.namenode.edits.dir</name>
    <value>/var/hdfs/edit-1,/var/hdfs/edit-2</value>
    <description>Determines where on the local filesystem the DFS name node should store the transaction (edits) file. If this is a comma-delimited list of directories then the transaction file is replicated in all of the directories, for redundancy. Default value is same as dfs.namenode.name.dir</description>
  </property>

  <property>
    <name>dfs.replication</name>
    <value>1</value>
    <description>Default block replication. The actual number of replications can be specified when the file is created. The default is used if replication is not specified in create time. Default: 3</description>
  </property>

  <property>
    <name>dfs.blocksize</name>
    <value>134217728</value>
    <description>The default block size for new files, in bytes. You can use the following suffix (case insensitive): k(kilo), m(mega), g(giga), t(tera), p(peta), e(exa) to specify the size (such as 128k, 512m, 1g, etc.), Or provide complete size in bytes (such as 134217728 for 128 MB). Default: 128MB (134217728 bit)</description>
  </property>

  <property>
    <name>dfs.namenode.handler.count</name>
    <value>100</value>
    <description>The number of Namenode RPC server threads that listen to requests from clients. If dfs.namenode.servicerpc-address is not configured then Namenode RPC server threads listen to requests from all nodes. Default: 10</description>
  </property>

  <property>
    <name>dfs.namenode.http-address</name>
    <value>master:9870</value>
    <description>The address and the base port where the dfs namenode web ui will listen on. Default: 0.0.0.0:9870</description>
  </property>

  <property>
    <name>dfs.namenode.checkpoint.dir</name>
    <value>/var/hdfs/namesecondary</value>
    <description>Determines where on the local filesystem the DFS secondary name node should store the temporary images to merge. If this is a comma-delimited list of directories then the image is replicated in all of the directories for redundancy</description>
  </property>

  <property>
    <name>dfs.storage.policy.enabled</name>
    <value>true</value>
    <description>Allow users to change the storage policy on files and directories. Default: true</description>
  </property>

  <property>
    <name>dfs.datanode.data.dir</name>
    <value>[DISK]file:///data/hdfs,[DISK]file:///var/hdfs/data</value>
    <!-- <value>[DISK]file:///data/hdfs,[DISK]file:///var/hdfs/data,[RAM_DISK]file:///mnt/hdfs</value> -->
    <description>On each data node, the comma-separated storage locations should be tagged with their storage types. This allows storage policies to place the blocks on different storage types according to policy. For example:
    1. A datanode storage location /grid/dn/disk0 on DISK should be configured with [DISK]file:///grid/dn/disk0
    2. A datanode storage location /grid/dn/ssd0 on SSD can should configured with [SSD]file:///grid/dn/ssd0
    3. A datanode storage location /grid/dn/archive0 on ARCHIVE should be configured with [ARCHIVE]file:///grid/dn/archive0
    4. A datanode storage location /grid/dn/ram0 on RAM_DISK should be configured with [RAM_DISK]file:///grid/dn/ram0
  The default storage type of a datanode storage location will be DISK if it does not have a storage type tagged explicitly</description>
  </property>

  <property>
    <name>dfs.client.read.shortcircuit</name>
    <value>true</value>
    <description>This configuration parameter turns on short-circuit local reads. Default: false
    Short-circuit local reads are mandatory for Impala.</description>
  </property>

  <property>
    <name>dfs.domain.socket.path</name>
    <value>/var/hdfs/run/sc-socket</value>
    <description>This is a path to a UNIX domain socket that will be used for communication between the DataNode and local HDFS clients. If the string "_PORT" is present in this path, it will be replaced by the TCP port of the DataNode.</description>
  </property>

  <property>
    <name>dfs.client.file-block-storage-locations.timeout.millis</name>
    <value>10000</value>
    <description>Timeout (in milliseconds) for the parallel RPCs made in DistributedFileSystem#getFileBlockStorageLocations(). Default: 1000
    Setting to 10000 is for Impala.</description>
  </property>

  <property>
    <name>dfs.datanode.hdfs-blocks-metadata.enabled</name>
    <value>true</value>
    <description>Boolean which enables backend datanode-side support for the experimental DistributedFileSystem#getFileVBlockStorageLocations API. Default: false
    Enabling block location metadata allows Impala to know which disk data blocks are located on, allowing better utilization of the underlying disks. Impala will not start unless this setting is enabled.</description>
  </property>

  <property>
    <name>dfs.datanode.max.locked.memory</name>
    <value>536870912</value>
    <description>Centralized Cache Management/Memory Storage Support: The amount of memory in bytes to use for caching of block replicas in memory on the datanode. The datanode's maximum locked memory soft ulimit (RLIMIT_MEMLOCK) must be set to at least this value, else the datanode will abort on startup. By default, this parameter is set to 0, which disables in-memory caching. If the native libraries are not available to the DataNode, this configuration has no effect</description>
  </property>

  <property>
    <name>dfs.hosts.exclude</name>
    <value>/etc/hadoop/exclude</value>
    <description>Names a file that contains a list of hosts that are not permitted to connect to the namenode. The full pathname of the file must be specified. If the value is empty, no hosts are excluded</description>
  </property>

  <property>
    <name>dfs.permissions.enabled</name>
    <value>true</value>
    <description>If "true", enable permission checking in HDFS. If "false", permission checking is turned off, but all other behavior is unchanged. Switching from one parameter value to the other does not change the mode, owner or group of files or directories. Default: true</description>
  </property>

  <property>
    <name>dfs.permissions.superusergroup</name>
    <value>hadoop</value>
    <description>The name of the group of super-users. The value should be a single group name. Default: supergroup</description>
  </property>

  <property>
    <name>dfs.namenode.acls.enabled</name>
    <value>true</value>
    <description>Set to true to enable support for HDFS ACLs (Access Control Lists). By default, ACLs are disabled. When ACLs are disabled, the NameNode rejects all RPCs related to setting or getting ACLs. Default: false</description>
  </property>
  
</configuration>
